import streamlit as st
import graphviz as gv

# T√≠tulo do aplicativo
st.title("üìä Construtor de Fluxogramas Acad√™micos")

# Inicializar o estado da sess√£o para armazenar elementos e conex√µes
if 'elements' not in st.session_state:
    st.session_state.elements = []
if 'connections' not in st.session_state:
    st.session_state.connections = []

# Fun√ß√£o para adicionar elementos
def add_element(element_type, element_text, element_color):
    st.session_state.elements.append({
        'type': element_type,
        'text': element_text,
        'color': element_color
    })

# Fun√ß√£o para adicionar conex√µes
def add_connection(from_idx, to_idx, connection_text):
    st.session_state.connections.append({
        'from': from_idx,
        'to': to_idx,
        'text': connection_text
    })

# Barra lateral para adicionar elementos
with st.sidebar:
    st.header("üîß Ferramentas")
    
    element_type = st.selectbox(
        "Tipo de elemento:",
        options=["In√≠cio", "Atividade", "Decis√£o", "Documento", "T√©rmino"]
    )
    
    element_text = st.text_input("Texto do elemento:")
    element_color = st.color_picker("Cor do elemento:", "#4CAF50")
    
    if st.button("Adicionar elemento"):
        if element_text:
            add_element(element_type, element_text, element_color)
            st.success(f"Elemento '{element_text}' adicionado!")
        else:
            st.warning("Por favor, insira um texto para o elemento")

# Barra lateral para conectar elementos
with st.sidebar:
    st.header("üîó Conectar Elementos")
    
    if len(st.session_state.elements) > 1:
        element_options = [f"{i}: {elem['text']}" for i, elem in enumerate(st.session_state.elements)]
        
        from_idx = st.selectbox(
            "De:",
            options=element_options,
            format_func=lambda x: x.split(": ")[1]
        )
        
        to_idx = st.selectbox(
            "Para:",
            options=element_options,
            format_func=lambda x: x.split(": ")[1]
        )
        
        connection_text = st.text_input("Texto da conex√£o:")
        
        if st.button("Conectar elementos"):
            from_idx = int(from_idx.split(":")[0])
            to_idx = int(to_idx.split(":")[0])
            add_connection(from_idx, to_idx, connection_text)
            st.success("Conex√£o adicionada!")
    else:
        st.warning("Adicione pelo menos 2 elementos para criar conex√µes")

# Renderizar o fluxograma
graph = gv.Digraph()
graph.attr('node', style='filled')

# Adicionar elementos ao gr√°fico
for i, element in enumerate(st.session_state.elements):
    node_attrs = {'fillcolor': element['color']}
    
    if element['type'] == "In√≠cio":
        node_attrs['shape'] = 'ellipse'
    elif element['type'] == "Atividade":
        node_attrs['shape'] = 'box'
    elif element['type'] == "Decis√£o":
        node_attrs['shape'] = 'diamond'
    elif element['type'] == "Documento":
        node_attrs['shape'] = 'note'
    elif element['type'] == "T√©rmino":
        node_attrs['shape'] = 'ellipse'
        node_attrs['peripheries'] = '2'
    
    graph.node(str(i), label=element['text'], **node_attrs)

# Adicionar conex√µes ao gr√°fico
for connection in st.session_state.connections:
    graph.edge(
        str(connection['from']),
        str(connection['to']),
        label=connection['text']
    )

# Mostrar o gr√°fico
st.graphviz_chart(graph)

# Mostrar elementos e conex√µes (para debug)
with st.expander("üîç Estado Atual (Debug)"):
    st.write("Elementos:", st.session_state.elements)
    st.write("Conex√µes:", st.session_state.connections)

# Bot√£o para limpar tudo
if st.button("üßπ Limpar Fluxograma"):
    st.session_state.elements = []
    st.session_state.connections = []
    st.experimental_rerun()